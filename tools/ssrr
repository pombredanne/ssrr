#!/usr/bin/python


import simplejson
import httplib
import time
import subprocess
import signal
import os
import sys
from threading import Thread
from optparse import OptionParser

from datetime import datetime

### Global vars #####################################################

RUN = True

REFRESH_TIME = 10
FISRT_START_TIME = 15
STALLED_TIME = 300
ERLYVIDEO_IP_SRC = '127.0.0.1'
ERLYVIDEO_IP_DEST = '127.0.0.2'
ERLYVIDEO_HTTP_PORT_SRC = 8082
ERLYVIDEO_HTTP_PORT_DEST = 8082
ERLYVIDEO_RTMP_PORT_SRC =  1935
ERLYVIDEO_RTMP_PORT_DEST = 1935

FFMPEG_THREADS = {}
STREAMS_SRC = {}
STREAMS_DEST = {}

LOG_FILE = "/dev/stdout"
LOG_FILE_FD = None

LOG_SEVERITIES = \
    ["emerg", "alert", "crit", "err", "warning", "notice", "info", "debug"]
VERBOSITY_LEVEL = LOG_SEVERITIES[6]


### Global vars #####################################################


def message(module, mess, severity=LOG_SEVERITIES[6], identifier=None, peer=None):
  global VERBOSITY_LEVEL
  global LOG_SEVERITIES

  i_s = 6
  try:
      i_s = LOG_SEVERITIES.index(severity)
  except ValueError:
      pass
  i_l = LOG_SEVERITIES.index(VERBOSITY_LEVEL)

  if i_s <= i_l:
    res = "[%s]" % str(datetime.utcfromtimestamp(float(time.time())).isoformat())

    if severity:
      res = res + " [%s]" % str(severity).upper()
    else:
      res = res + " [-]"

    res = res + " [%s]" % str(module)

    if peer:
      res = res + " [%s]" % str(peer)
    else:
      try:
        if request.header.get('X-Real-IP'):
          res = res + " [%s]" % str( request.header.get('X-Real-IP') )
        else:
          res = res + " [%s]" % str(request.environ["REMOTE_ADDR"])
      except:
        res = res + " [-]"

    if identifier:
      res = res + " [%s]" % str(identifier)
    else:
      res = res + " [-]"

    res = res + " " + str(mess)

    LOG_FILE_FD.write(res + "\n")
    LOG_FILE_FD.flush()



class ffmpegRunner(Thread):

    def __init__ (self,name):
        Thread.__init__(self)

        self.name = name
        self.stop = False
        self.first_start_option = True
        self.ffmpeg = None
        self.starttime = 0


    def run (self):
      m = "starting ffmpeg thread for %s stream" \
                % (self.name)
      message("run", m, "INFO", None, None)
      p = None
      while not self.stop:
        self.starttime = time.time()
      
        cmd = '''ffmpeg  -async 2 -i http://%s:%s/stream/%s
              -acodec aac  -strict experimental  -ar 44100  -ab 64k
              -vcodec copy
              -f flv rtmp://%s:%s/rtmp/%s '''
        cmd = cmd % (ERLYVIDEO_IP_SRC, ERLYVIDEO_HTTP_PORT_SRC, self.name, ERLYVIDEO_IP_DEST,
            ERLYVIDEO_RTMP_PORT_DEST, self.name)

        if self.first_start_option:
            m = "first start option selected for %s stream" \
                % (self.name)
            message("run", m, "INFO", None, None)
 
            cmd = '''ffmpeg -i rtmp://%s:%s/live/%s  -vcodec copy
              -acodec copy -f flv rtmp://%s:%s/rtmp/%s'''
            cmd = cmd % (ERLYVIDEO_IP_SRC, ERLYVIDEO_RTMP_PORT_SRC, self.name, ERLYVIDEO_IP_DEST,
               ERLYVIDEO_RTMP_PORT_DEST, self.name)

        self.ffmpeg = subprocess.Popen(cmd.split(), shell=False, bufsize=1024,
                stdin=subprocess.PIPE, stdout=open('/dev/null', 'w'),
                stderr=open('/dev/null', 'w'), close_fds=True)

        p = self.ffmpeg

        m = "launched ffmpeg for %s stream (%s)" \
                % (self.name,str(p.pid))
        message("run", m, "INFO", None, None)

        # s1 = True
        # while (s1):
        #     if self.stop:
        #         # print "stopped"
        #         os.kill(p.pid,9)
        #         s1 = False

        #     p.stderr.read(200)
        #     # print "running ffmpeg for %s stream (%s)" \
        #     #   % (self.name,str(p.pid))

        p.wait()
        m = "ending ffmpeg for %s stream (%s)" % (self.name,str(p.pid))
        message("run", m, "INFO", None, None)
        time.sleep (2)

      m = "stopped ffmpeg for %s stream (%s)" % (self.name,str(p.pid))
      message("run", m, "INFO", None, None)


def exist_dest_stream_name(stream_name):
    global STREAMS_DEST
    for s in STREAMS_DEST:
        if s["name"] == stream_name:
            return True
    return False


def exist_src_stream_name(stream_name):
    global STREAMS_SRC
    for s in STREAMS_SRC:
        if s["name"] == stream_name:
            return True
    return False

def kill_ffmpeg_thread_by_name(name):
    global FFMPEG_THREADS

    p = FFMPEG_THREADS[name]
    m = "kill_ffmpeg_thread_by_name " + str(name)
    message ("",  m, "INFO", None, None)
    try:
        p.ffmpeg.kill()
    except Exception:
        pass

def stop_thread_by_name(name):
    global FFMPEG_THREADS

    p = FFMPEG_THREADS[name]
    m = "killing " + str(name)
    message ("stop_thread_by_name",  m, "INFO", None, None)
    p.stop = True

    try:
        p.ffmpeg.kill()
    except Exception:
        pass

    m = "joining " + str(name)
    message ("main",  m, "INFO", None, None)
    FFMPEG_THREADS.pop(name)


def get_streams_available (ip, port):
    conn = httplib.HTTPConnection(ip, port)
    conn.request("GET", "/erlyvideo/api/streams")
    r1 = conn.getresponse()

    # >>> print r1.status, r1.reason
    # 200 OK

    rules = simplejson.load(r1 )
    return rules["streams"]


def refresh_streams_dest_availables(ERLYVIDEO_IP,ERLYVIDEO_HTTP_PORT):
    global STREAMS_DEST
    STREAMS_DEST = get_streams_available(ERLYVIDEO_IP,ERLYVIDEO_HTTP_PORT)


def refresh_streams_src_availables(ERLYVIDEO_IP,ERLYVIDEO_HTTP_PORT):
    global STREAMS_SRC
    STREAMS_SRC = get_streams_available(ERLYVIDEO_IP,ERLYVIDEO_HTTP_PORT)


# for s in streams:
#     print s["name"]
def signal_hup_handler(signal, frame):
    global LOG_FILE_FD
    print 'Reloading ... '
    m = "Signal number %s detected. Reloading recorder" % str(signal)
    message ("signal_hup_handler",  m, "INFO", None, None)

    n = LOG_FILE_FD.name

    try:
      LOG_FILE_FD.close()
      LOG_FILE_FD = open(ops.logfile, "a+b")
    except Exception, e:
      # print "Can not open %s file: %s" % (n, str(e))
      sys.exit (-1)

def exit_program():
    global FFMPEG_THREADS
    if len (FFMPEG_THREADS) > 0:
        print 'Stopping threads ... '
        m =  "Stopping threads ..."
        message ("exit_program",  m, "INFO", None, None)
        for k,v in FFMPEG_THREADS.items():
            m = "killing " + v.name
            message ("exit_program",  m, "INFO", None, None)
            v.stop = True

        for k,v in FFMPEG_THREADS.items():
            m = "joining " + v.name
            message ("exit_program",  m, "INFO", None, None)
            if v.ffmpeg:
              v.ffmpeg.kill()
            v.join()
            FFMPEG_THREADS.pop(k)

    sys.exit(0)

def signal_int_handler(signal, frame):
    RUN = False
    m = "Keyboard interrupt: program ending"
    message ("signal_int_handler",  m, "INFO", None, None)
    exit_program()


signal.signal(signal.SIGINT, signal_int_handler)
signal.signal(signal.SIGHUP, signal_hup_handler)
signal.signal(signal.SIGTERM, signal_int_handler)


UDP_SOURCE=False

### End Global vars


################################################################################


parser = OptionParser()

parser.add_option("-w", "--workdir", dest="workdir", default=".",
        help="Work directory (default: .)", metavar="WORKDIR")

parser.add_option("-U", "--uri", dest="uri",
        help="Source URI/URL (default: http://localhost:8082)",
        default="http://localhost:8082")

parser.add_option("-i", "--sourceip",
        dest="sourceip", default=ERLYVIDEO_IP_SRC,
        help="Source IP (default: %s)" % ERLYVIDEO_IP_SRC)

parser.add_option("-d", "--destinationip",
        dest="destinationip", default=ERLYVIDEO_IP_DEST,
        help="Destination IP (default: %s)" % ERLYVIDEO_IP_DEST)

parser.add_option("--sourcehttpport",
        dest="sourcehttpport", default=ERLYVIDEO_HTTP_PORT_SRC,
        help="Source HTTP port (default: %s)" % ERLYVIDEO_HTTP_PORT_SRC)

parser.add_option("--sourcertmpport",
        dest="sourcertmpport", default=ERLYVIDEO_RTMP_PORT_SRC,
        help="Source RTMP port (default: %s)" % ERLYVIDEO_RTMP_PORT_SRC)

parser.add_option("--destinationhttpport",
        dest="destinationhttpport", default=ERLYVIDEO_HTTP_PORT_DEST,
        help="Destination HTTP port (default: %s)" % ERLYVIDEO_HTTP_PORT_DEST)

parser.add_option("--destinationrtmpport",
        dest="destinationrtmpport", default=ERLYVIDEO_RTMP_PORT_DEST,
        help="Destination RTMP port (default: %s)" % ERLYVIDEO_RTMP_PORT_DEST)

parser.add_option("-r", "--refreshtime",
        dest="refreshtime", default=REFRESH_TIME,
        help="Refresh time (default: %s)" % REFRESH_TIME)

parser.add_option("--stalledtime",
        dest="stalledtime", default=STALLED_TIME,
        help="Stalled time allowed (default: %s)" % STALLED_TIME)


parser.add_option("-L", "--logfile",
        dest="logfile", default=LOG_FILE,
        help="Log file (default: %s)" % LOG_FILE)



(ops, args) = parser.parse_args()

ERLYVIDEO_IP_SRC = ops.sourceip
ERLYVIDEO_IP_DEST = ops.destinationip
ERLYVIDEO_HTTP_PORT_SRC = int(ops.sourcehttpport)
ERLYVIDEO_HTTP_PORT_DEST = int(ops.destinationhttpport)
ERLYVIDEO_RTMP_PORT_SRC = int(ops.sourcertmpport)
ERLYVIDEO_RTMP_PORT_DEST = int(ops.destinationrtmpport)
REFRESH_TIME = int(ops.refreshtime)
STALLED_TIME = int(ops.stalledtime)


try:
    LOG_FILE_FD = open(ops.logfile, "a+b")
except Exception, e:
    m = "Can not open %s file: %s" % (ops.logfile, str(e))
    message("main", m, "INFO", None, None)
    sys.exit (-1)

while RUN:
    m = "current threads: " + repr(FFMPEG_THREADS.keys())
    message("main", m, "INFO", None, None)


    refresh_streams_src_availables(ERLYVIDEO_IP_SRC,ERLYVIDEO_HTTP_PORT_SRC)
    for s in STREAMS_SRC:
        _name = s["name"]

        if not FFMPEG_THREADS.has_key(_name):
            m = "starting " + str(_name)
            message ("main",  m, "INFO", None, None)
            t = ffmpegRunner(_name)
            t.start()
            FFMPEG_THREADS[_name] = t


    time.sleep (REFRESH_TIME)

    refresh_streams_dest_availables(ERLYVIDEO_IP_DEST,ERLYVIDEO_HTTP_PORT_DEST)
    for f in FFMPEG_THREADS.keys():
        p = FFMPEG_THREADS[f]

        if not exist_src_stream_name(f):
            stop_thread_by_name(f)
        else:
            if not exist_dest_stream_name(f) \
            and p.first_start_option and (time.time() - p.starttime > FISRT_START_TIME):
                # First attemp (without audio transcoding) is not OK
                m = "first attempt in thread for " + str(f) + " has failed"
                p.first_start_option = False
                message ("main",  m, "INFO", None, None)
                kill_ffmpeg_thread_by_name(f)

            if not exist_dest_stream_name(f) \
            and (time.time() - p.starttime > STALLED_TIME):
                # In this case, for some reason, ffmpeg proccess are not
                # pushing stream to the dest erlyvideo. 
                # We will kill it to prevent ffmpeg in a stalled status.
                m = "thread for " + str(f) + " has reached a stalled state"
                message ("main",  m, "INFO", None, None)
                stop_thread_by_name (f)





